import React, { useState, useEffect } from 'react';
import { supabase } from '@/lib/supabaseClient';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import { Users, UserPlus, Share2, Heart } from 'lucide-react';
import { toast } from 'sonner';

interface UserProfile {
  id: string;
  username?: string;
  avatar_url?: string;
  bio?: string;
}

export function SocialFeatures() {
  const [following, setFollowing] = useState<UserProfile[]>([]);
  const [followers, setFollowers] = useState<UserProfile[]>([]);
  const [loading, setLoading] = useState(true);
  const [currentUserId, setCurrentUserId] = useState<string | null>(null);

  useEffect(() => {
    loadSocialData();
  }, []);

  const loadSocialData = async () => {
    try {
      setLoading(true);
      const { data: { user } } = await supabase.auth.getUser();
      if (!user) return;
      
      setCurrentUserId(user.id);
      // Placeholder - would load from proper tables
      setFollowing([]);
      setFollowers([]);
    } catch (error) {
      console.error('Error loading social data:', error);
    } finally {
      setLoading(false);
    }
  };

  const followUser = async (userId: string) => {
    try {
      if (!currentUserId) return;
      // Placeholder for follow logic
      toast.success('User followed successfully');
      loadSocialData();
    } catch (error) {
      console.error('Error following user:', error);
      toast.error('Failed to follow user');
    }
  };

  const unfollowUser = async (userId: string) => {
    try {
      if (!currentUserId) return;
      // Placeholder for unfollow logic
      toast.success('User unfollowed');
      loadSocialData();
    } catch (error) {
      console.error('Error unfollowing user:', error);
      toast.error('Failed to unfollow user');
    }
  };

  const shareList = async (listId: string) => {
    try {
      // Generate shareable link
      const shareUrl = `${window.location.origin}/lists/${listId}`;
      await navigator.clipboard.writeText(shareUrl);
      toast.success('List link copied to clipboard!');
    } catch (error) {
      console.error('Error sharing list:', error);
      toast.error('Failed to share list');
    }
  };

  if (loading) {
    return <div>Loading social features...</div>;
  }

  return (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Users className="h-5 w-5" />
            Social Features
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div>
            <h3 className="text-sm font-medium mb-2">Following ({following.length})</h3>
            {following.length === 0 ? (
              <p className="text-muted-foreground text-sm">Not following anyone yet</p>
            ) : (
              <div className="space-y-2">
                {following.map((user) => (
                  <div key={user.id} className="flex items-center justify-between">
                    <div className="flex items-center gap-2">
                      <Avatar className="h-8 w-8">
                        <AvatarImage src={user.avatar_url} />
                        <AvatarFallback>{user.username?.[0] || 'U'}</AvatarFallback>
                      </Avatar>
                      <span className="text-sm">{user.username || 'Unknown User'}</span>
                    </div>
                    <Button
                      size="sm"
                      variant="outline"
                      onClick={() => unfollowUser(user.id)}
                    >
                      Unfollow
                    </Button>
                  </div>
                ))}
              </div>
            )}
          </div>

          <div>
            <h3 className="text-sm font-medium mb-2">Followers ({followers.length})</h3>
            {followers.length === 0 ? (
              <p className="text-muted-foreground text-sm">No followers yet</p>
            ) : (
              <div className="space-y-2">
                {followers.map((user) => (
                  <div key={user.id} className="flex items-center justify-between">
                    <div className="flex items-center gap-2">
                      <Avatar className="h-8 w-8">
                        <AvatarImage src={user.avatar_url} />
                        <AvatarFallback>{user.username?.[0] || 'U'}</AvatarFallback>
                      </Avatar>
                      <span className="text-sm">{user.username || 'Unknown User'}</span>
                    </div>
                    <Button
                      size="sm"
                      variant="outline"
                      onClick={() => followUser(user.id)}
                    >
                      <UserPlus className="h-4 w-4" />
                    </Button>
                  </div>
                ))}
              </div>
            )}
          </div>

          <div className="pt-4">
            <Button
              variant="outline"
              className="w-full"
              onClick={() => shareList('default')}
            >
              <Share2 className="h-4 w-4 mr-2" />
              Share My List
            </Button>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}
