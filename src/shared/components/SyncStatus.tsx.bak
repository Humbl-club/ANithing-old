import React from 'react';
import { useSync } from '@/hooks/useSync';
import { useOfflineSync } from '@/hooks/useOfflineSync';
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';
import { RefreshCw, CheckCircle, AlertCircle } from 'lucide-react';

export function SyncStatus() {
  const syncService = useSync();
  const offlineSync = useOfflineSync();

  const handleSync = async () => {
    await syncService.startSync();
    await offlineSync.forceSync();
  };

  return (
    <Card className="p-4">
      <div className="flex items-center justify-between">
        <div className="flex items-center gap-2">
          {offlineSync.syncInProgress ? (
            <RefreshCw className="h-4 w-4 animate-spin" />
          ) : offlineSync.errors.length > 0 ? (
            <AlertCircle className="h-4 w-4 text-destructive" />
          ) : (
            <CheckCircle className="h-4 w-4 text-green-500" />
          )}
          <div>
            <p className="text-sm font-medium">
              {offlineSync.syncInProgress ? 'Syncing...' : 'Sync Status'}
            </p>
            {syncService.lastSyncTime && (
              <p className="text-xs text-muted-foreground">
                Last sync: {new Date(syncService.lastSyncTime).toLocaleString()}
              </p>
            )}
            {offlineSync.pendingOperations > 0 && (
              <p className="text-xs text-yellow-600">
                {offlineSync.pendingOperations} pending operations
              </p>
            )}
          </div>
        </div>
        <Button
          size="sm"
          variant="outline"
          onClick={handleSync}
          disabled={offlineSync.syncInProgress}
        >
          <RefreshCw className={`h-4 w-4 ${offlineSync.syncInProgress ? 'animate-spin' : ''}`} />
        </Button>
      </div>
      {offlineSync.errors.length > 0 && (
        <div className="mt-2 space-y-1">
          {offlineSync.errors.map((error, index) => (
            <p key={index} className="text-xs text-destructive">{error}</p>
          ))}
          <Button
            size="sm"
            variant="ghost"
            onClick={() => offlineSync.clearErrors()}
          >
            Clear Errors
          </Button>
        </div>
      )}
    </Card>
  );
}
