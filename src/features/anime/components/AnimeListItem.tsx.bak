import React from 'react';
import { Star, PlayCircle, Calendar, TrendingUp } from 'lucide-react';
import { Link } from 'react-router-dom';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { Card, CardContent } from '@/components/ui/card';
import { cn } from '@/lib/utils';

interface AnimeListItemProps {
  anime: any;
  viewMode?: 'card' | 'list' | 'compact';
  showProgress?: boolean;
  className?: string;
}

export function AnimeListItem({ 
  anime, 
  viewMode = 'card', 
  showProgress = false,
  className 
}: AnimeListItemProps) {
  const mainStoryProgress = 0; // Simplified for now
  const nextMainStoryEpisode = null; // Simplified for now
  
  const formatDate = (dateString: string | null) => {
    if (!dateString) return 'TBA';
    return new Date(dateString).toLocaleDateString('en-US', {
      month: 'short',
      day: 'numeric',
      year: 'numeric'
    });
  };

  const getStatusColor = (status: string) => {
    switch (status?.toLowerCase()) {
      case 'finished airing':
      case 'finished':
        return 'bg-green-500/10 text-green-500';
      case 'currently airing':
      case 'releasing':
        return 'bg-blue-500/10 text-blue-500';
      case 'not yet aired':
      case 'upcoming':
        return 'bg-yellow-500/10 text-yellow-500';
      default:
        return 'bg-gray-500/10 text-gray-500';
    }
  };

  const mainStoryEpisodes = anime.episodes || 0;
  const watchedEpisodes = 0; // This would come from user data

  if (viewMode === 'list') {
    return (
      <Card className={cn("hover:shadow-lg transition-shadow", className)}>
        <CardContent className="p-4">
          <div className="flex gap-4">
            <Link to={`/anime/${anime.id}`} className="shrink-0">
              <img
                src={anime.image_url || anime.cover_image}
                alt={anime.title}
                className="w-20 h-28 object-cover rounded-md"
              />
            </Link>
            <div className="flex-1 min-w-0">
              <div className="flex items-start justify-between">
                <div className="flex-1">
                  <Link 
                    to={`/anime/${anime.id}`}
                    className="font-semibold text-lg hover:text-primary transition-colors line-clamp-1"
                  >
                    {anime.title}
                  </Link>
                  {anime.title_english && anime.title_english !== anime.title && (
                    <p className="text-sm text-muted-foreground line-clamp-1">
                      {anime.title_english}
                    </p>
                  )}
                  <div className="flex items-center gap-4 mt-2 text-sm text-muted-foreground">
                    <div className="flex items-center gap-1">
                      <Star className="h-4 w-4 fill-yellow-500 text-yellow-500" />
                      <span>{anime.score || 'N/A'}</span>
                    </div>
                    <div className="flex items-center gap-1">
                      <PlayCircle className="h-4 w-4" />
                      <span>{anime.episodes || '?'} episodes</span>
                    </div>
                    <Badge variant="secondary" className={getStatusColor(anime.status)}>
                      {anime.status}
                    </Badge>
                  </div>
                </div>
              </div>
              {showProgress && mainStoryEpisodes > 0 && (
                <div className="mt-3">
                  <div className="flex items-center justify-between text-sm mb-1">
                    <span className="text-muted-foreground">
                      Progress: {watchedEpisodes} / {mainStoryEpisodes}
                    </span>
                    <span className="text-muted-foreground">
                      {Math.round((watchedEpisodes / mainStoryEpisodes) * 100)}%
                    </span>
                  </div>
                  <Progress 
                    value={(watchedEpisodes / mainStoryEpisodes) * 100} 
                    className="h-2"
                  />
                </div>
              )}
            </div>
          </div>
        </CardContent>
      </Card>
    );
  }

  if (viewMode === 'compact') {
    return (
      <Link 
        to={`/anime/${anime.id}`}
        className={cn(
          "flex items-center gap-3 p-2 rounded-lg hover:bg-accent transition-colors",
          className
        )}
      >
        <img
          src={anime.image_url || anime.cover_image}
          alt={anime.title}
          className="w-12 h-16 object-cover rounded"
        />
        <div className="flex-1 min-w-0">
          <p className="font-medium line-clamp-1">{anime.title}</p>
          <div className="flex items-center gap-2 text-xs text-muted-foreground">
            <span>{anime.episodes || '?'} eps</span>
            <span>â€¢</span>
            <span>{anime.score || 'N/A'}</span>
          </div>
        </div>
      </Link>
    );
  }

  // Card view (default)
  return (
    <Card className={cn("group hover:shadow-lg transition-shadow", className)}>
      <Link to={`/anime/${anime.id}`}>
        <div className="aspect-[3/4] relative overflow-hidden">
          <img
            src={anime.image_url || anime.cover_image}
            alt={anime.title}
            className="w-full h-full object-cover group-hover:scale-105 transition-transform duration-300"
          />
          <div className="absolute inset-0 bg-gradient-to-t from-black/70 via-transparent to-transparent opacity-0 group-hover:opacity-100 transition-opacity" />
          <Badge 
            className={cn(
              "absolute top-2 right-2",
              getStatusColor(anime.status)
            )}
          >
            {anime.status}
          </Badge>
        </div>
      </Link>
      <CardContent className="p-4">
        <Link 
          to={`/anime/${anime.id}`}
          className="font-semibold hover:text-primary transition-colors line-clamp-2"
        >
          {anime.title}
        </Link>
        <div className="flex items-center justify-between mt-2 text-sm text-muted-foreground">
          <div className="flex items-center gap-1">
            <Star className="h-4 w-4 fill-yellow-500 text-yellow-500" />
            <span>{anime.score || 'N/A'}</span>
          </div>
          <span>{anime.episodes || '?'} eps</span>
        </div>
        {showProgress && mainStoryEpisodes > 0 && (
          <div className="mt-3">
            <Progress 
              value={(watchedEpisodes / mainStoryEpisodes) * 100} 
              className="h-2"
            />
            <p className="text-xs text-muted-foreground mt-1">
              {watchedEpisodes} / {mainStoryEpisodes} episodes
            </p>
          </div>
        )}
      </CardContent>
    </Card>
  );
}
