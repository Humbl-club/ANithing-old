import React, { useState } from 'react';
import { useAuth } from '@/hooks/useAuth';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { EnhancedEmailInput } from './EnhancedEmailInput';
import { EnhancedPasswordInput } from './EnhancedPasswordInput';

export function AuthForm() {
  const [isSignUp, setIsSignUp] = useState(false);
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [error, setError] = useState('');
  const [loading, setLoading] = useState(false);
  const [showValidation, setShowValidation] = useState(false);
  
  const { signIn, signUp, validateEmail, validatePassword } = useAuth();

  const emailValidation = validateEmail(email);
  const passwordValidation = validatePassword(password);
  const confirmPasswordValidation = validatePassword(confirmPassword);

  const isEmailValid = emailValidation.isValid;
  const isPasswordValid = passwordValidation.isValid;
  const doPasswordsMatch = password === confirmPassword;

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError('');
    setShowValidation(true);

    if (!isEmailValid || !isPasswordValid) {
      setError('Please fix validation errors');
      return;
    }

    if (isSignUp && !doPasswordsMatch) {
      setError('Passwords do not match');
      return;
    }

    setLoading(true);

    try {
      const result = isSignUp 
        ? await signUp(email, password)
        : await signIn(email, password);

      if (!result.success) {
        const errorMessage = typeof result.error === 'object' && result.error?.message 
          ? result.error.message 
          : 'Authentication failed';
        setError(errorMessage);
      }
    } catch (err) {
      setError('An unexpected error occurred');
    } finally {
      setLoading(false);
    }
  };

  return (
    <Card className="w-full max-w-md mx-auto">
      <CardHeader>
        <CardTitle>{isSignUp ? 'Sign Up' : 'Sign In'}</CardTitle>
      </CardHeader>
      <CardContent>
        <form onSubmit={handleSubmit} className="space-y-4">
          {error && (
            <Alert variant="destructive">
              <AlertDescription>{error}</AlertDescription>
            </Alert>
          )}
          
          <EnhancedEmailInput
            value={email}
            onChange={setEmail}
            validation={emailValidation}
            showValidation={showValidation}
            disabled={loading}
          />
          
          <EnhancedPasswordInput
            value={password}
            onChange={setPassword}
            validation={passwordValidation}
            showValidation={showValidation}
            disabled={loading}
            isSignUp={isSignUp}
          />
          
          {isSignUp && (
            <EnhancedPasswordInput
              placeholder="Confirm Password"
              value={confirmPassword}
              onChange={setConfirmPassword}
              validation={confirmPasswordValidation}
              showValidation={showValidation}
              disabled={loading}
              hideStrengthMeter
            />
          )}
          
          <Button 
            type="submit" 
            className="w-full" 
            disabled={loading}
          >
            {loading ? 'Loading...' : (isSignUp ? 'Sign Up' : 'Sign In')}
          </Button>
          
          <Button
            type="button"
            variant="link"
            className="w-full"
            onClick={() => {
              setIsSignUp(!isSignUp);
              setError('');
              setShowValidation(false);
            }}
          >
            {isSignUp ? 'Already have an account? Sign In' : "Don't have an account? Sign Up"}
          </Button>
        </form>
      </CardContent>
    </Card>
  );
}
