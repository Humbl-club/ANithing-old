import { createContext, useContext, useState, useEffect } from 'react';
import { authService } from '@/services/authService';
import { supabase } from '@/lib/supabaseClient';

interface AuthContextType {
  user: any;
  loading: boolean;
  signUp: typeof authService.signUp;
  signIn: typeof authService.signIn;
  signOut: typeof authService.signOut;
  signInWithGoogle: typeof authService.signInWithGoogle;
  resendConfirmation: typeof authService.resendConfirmation;
  validatePassword: (password: string) => { isValid: boolean; score: number; errors: string[]; suggestions: string[] };
  validateEmail: (email: string) => { isValid: boolean; errors: string[]; suggestions: string[] };
  validateEmailFormat: (email: string) => boolean;
  validatePasswordStrength: (password: string) => { score: number; feedback: string[] };
}

const AuthContext = createContext<AuthContextType | null>(null);

export function AuthProvider({ children }: { children: React.ReactNode }) {
  const [user, setUser] = useState<any>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    setLoading(true);
    supabase.auth.getSession().then(({ data: { session } }) => {
      setUser(session?.user ?? null);
      setLoading(false);
    });

    const { data: { subscription } } = supabase.auth.onAuthStateChange((_event, session) => {
      setUser(session?.user ?? null);
    });

    return () => subscription.unsubscribe();
  }, []);

  const validatePassword = (password: string) => {
    const errors = [];
    if (password.length < 8) errors.push('Password must be at least 8 characters');
    return {
      isValid: errors.length === 0,
      score: password.length >= 8 ? 3 : 1,
      errors,
      suggestions: []
    };
  };

  const validateEmail = (email: string) => {
    const re = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return {
      isValid: re.test(email),
      errors: re.test(email) ? [] : ['Invalid email format'],
      suggestions: []
    };
  };

  const validateEmailFormat = (email: string) => {
    const re = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return re.test(email);
  };

  const validatePasswordStrength = (password: string) => {
    const feedback = [];
    if (password.length < 8) feedback.push('Too short');
    return {
      score: password.length >= 8 ? 3 : 1,
      feedback
    };
  };

  return (
    <AuthContext.Provider value={{
      user,
      loading,
      signUp: authService.signUp,
      signIn: authService.signIn,
      signOut: authService.signOut,
      signInWithGoogle: authService.signInWithGoogle,
      resendConfirmation: authService.resendConfirmation,
      validatePassword,
      validateEmail,
      validateEmailFormat,
      validatePasswordStrength
    }}>
      {children}
    </AuthContext.Provider>
  );
}

export function useAuth() {
  const context = useContext(AuthContext);
  if (!context) throw new Error('useAuth must be used within AuthProvider');
  return context;
}
