"use client"

import * as React from "react"
import * as RechartsPrimitive from "recharts"
import {
  NameType,
  Payload,
  ValueType,
} from "recharts/types/component/DefaultTooltipContent"

import { cn } from "@/lib/utils"

const THEMES = { light: "", dark: ".dark" } as const

export type ChartConfig = {
  [k in string]: {
    label?: React.ReactNode
    icon?: React.ComponentType
  } & (
    | { color?: string; theme?: never }
    | { color?: never; theme: Record<keyof typeof THEMES, string> }
  )
}

type ChartContextProps = {
  config: ChartConfig
}

const ChartContext = React.createContext<ChartContextProps | null>(null)

function useChart() {
  const context = React.useContext(ChartContext)

  if (!context) {
    throw new Error("useChart must be used within a <ChartContainer />")
  }

  return context
}

const ChartContainer = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    config: ChartConfig
    children: React.ComponentProps<
      typeof RechartsPrimitive.ResponsiveContainer
    >["children"]
  }
>(({ id, className, children, config, ...props }, ref) => {
  const uniqueId = React.useId()
  const chartId = `chart-${id || uniqueId.replace(/:/g, "")}`

  return (
    <ChartContext.Provider value={{ config }}>
      <div
        data-chart={chartId}
        ref={ref}
        className={cn(
          "flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[fill='#fff']]:fill-background [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-background [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none",
          className
        )}
        {...props}
      >
        <ChartStyle id={chartId} config={config} />
        <RechartsPrimitive.ResponsiveContainer>
          {children}
        </RechartsPrimitive.ResponsiveContainer>
      </div>
    </ChartContext.Provider>
  )
})
ChartContainer.displayName = "Chart"

const ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {
  const colorConfig = Object.entries(config).filter(
    ([, config]) => config.theme || config.color
  )

  if (!colorConfig.length) {
    return null
  }

  return (
    <style
      dangerouslySetInnerHTML={{
        __html: Object.entries(THEMES)
          .map(
            ([theme, prefix]) => `
${prefix} [data-chart=${id}] {
${colorConfig
  .map(([key, itemConfig]) => {
    const color =
      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||
      itemConfig.color
    return color ? `  --color-${key}: ${color};` : null
  })
  .join("\n")}
}
`
          )
          .join("\n"),
      }}
    />
  )
}

interface CustomTooltipProps {
  active?: boolean;
  payload?: Array<{
    value: any;
    name: string;
    color?: string;
    dataKey?: string;
    payload?: any;
  }>;
  label?: string;
  labelFormatter?: (value: any, payload: any[]) => React.ReactNode;
  formatter?: (value: any, name: string) => React.ReactNode;
  indicator?: "line" | "dot" | "dashed";
  hideLabel?: boolean;
  hideIndicator?: boolean;
  className?: string;
}

const ChartTooltip = ({ active, payload, label, className, indicator = "dot", hideLabel = false, hideIndicator = false, labelFormatter, formatter }: CustomTooltipProps) => {
  const { config } = useChart()

  const labelKey = label || (payload && payload.length > 0 ? payload[0].name : undefined)
  const itemConfig = labelKey && config[labelKey] ? config[labelKey] : {}

  const formattedLabel = labelFormatter
    ? labelFormatter(label, payload || [])
    : itemConfig.label || label

  if (!active || !payload) {
    return null
  }

  return (
    <div
      className={cn(
        "grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl",
        className
      )}
    >
      {!hideLabel && formattedLabel && (
        <div className="flex items-center gap-2">
          {!hideIndicator && (
            <div
              className={cn(
                "shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]",
                {
                  "h-2.5 w-2.5": indicator === "dot",
                  "w-1": indicator === "line",
                  "w-0 border-[1.5px] border-dashed bg-transparent":
                    indicator === "dashed",
                  "my-0.5": indicator === "dashed" && !hideLabel,
                }
              )}
              style={
                {
                  "--color-bg": `var(--color-${labelKey})`,
                  "--color-border": `var(--color-${labelKey})`,
                } as React.CSSProperties
              }
            />
          )}
          <div
            className={cn(
              "flex flex-1 justify-between leading-none",
              !hideIndicator && "items-center"
            )}
          >
            <div className="grid gap-1.5">
              {formattedLabel}
            </div>
          </div>
        </div>
      )}
      <div className="grid gap-1.5">
        {payload.map((item: any, index: number) => {
          const key = item.dataKey || item.name
          const itemConfig = config[key] || {}
          const indicatorColor = item.color || `var(--color-${key})`

          return (
            <div
              key={item.dataKey}
              className={cn(
                "flex w-full items-stretch gap-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:text-muted-foreground",
                indicator === "dot" && "items-center"
              )}
            >
              {!hideIndicator && (
                <div
                  className={cn(
                    "shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]",
                    {
                      "h-2.5 w-2.5": indicator === "dot",
                      "w-1": indicator === "line",
                      "w-0 border-[1.5px] border-dashed bg-transparent":
                        indicator === "dashed",
                      "my-0.5": indicator === "dashed" && !hideLabel,
                    }
                  )}
                  style={
                    {
                      "--color-bg": indicatorColor,
                      "--color-border": indicatorColor,
                    } as React.CSSProperties
                  }
                />
              )}
              <div
                className={cn(
                  "flex flex-1 justify-between leading-none",
                  !hideIndicator && "items-center"
                )}
              >
                <div className="grid gap-1.5">
                  <span className="text-muted-foreground">
                    {itemConfig.label || item.name}
                  </span>
                </div>
                {item.value != null && (
                  <span className="font-mono font-medium tabular-nums text-foreground">
                    {formatter
                      ? formatter(item.value, item.name)
                      : item.value.toLocaleString()}
                  </span>
                )}
              </div>
            </div>
          )
        })}
      </div>
    </div>
  )
}

interface CustomLegendProps {
  payload?: Array<{
    value: string;
    type?: string;
    id?: string;
    color?: string;
  }>;
  verticalAlign?: "top" | "bottom";
  className?: string;
  hideIcon?: boolean;
  nameKey?: string;
}

const ChartLegend = ({ payload = [], className, hideIcon = false, nameKey }: CustomLegendProps) => {
  const { config } = useChart()

  if (!payload?.length) {
    return null
  }

  return (
    <div
      className={cn(
        "flex items-center justify-center gap-4 text-sm",
        className
      )}
    >
      {payload.map((item: any) => {
        const key = nameKey || item.value
        const itemConfig = config[key] || {}

        return (
          <div
            key={item.value}
            className={cn("flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground")}
          >
            {!hideIcon && (
              <div
                className="h-2 w-2 shrink-0 rounded-[2px]"
                style={{
                  backgroundColor: item.color || `var(--color-${key})`,
                }}
              />
            )}
            {itemConfig.label || item.value}
          </div>
        )
      })}
    </div>
  )
}

// Create namespace augmentation

export {
  ChartContainer,
  ChartTooltip,
  ChartLegend,
  ChartStyle,
}
